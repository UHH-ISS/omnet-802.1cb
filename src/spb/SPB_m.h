//
// Generated file, do not edit! Created by nedtool 5.5 from spb/SPB.msg.
//

#ifndef __SPB_M_H
#define __SPB_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>spb/SPB.msg:16</tt> by nedtool.
 * <pre>
 * enum SPBMsgType
 * {
 *     REMAP = 0;
 *     PATH_PARSE = 1;
 * }
 * </pre>
 */
enum SPBMsgType {
    REMAP = 0,
    PATH_PARSE = 1
};

/**
 * Class generated from <tt>spb/SPB.msg:21</tt> by nedtool.
 * <pre>
 * packet SPBTimer
 * {
 *     int type \@enum(SPBMsgType);
 * }
 * </pre>
 */
class SPBTimer : public ::omnetpp::cPacket
{
  protected:
    int type;

  private:
    void copy(const SPBTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SPBTimer&);

  public:
    SPBTimer(const char *name=nullptr, short kind=0);
    SPBTimer(const SPBTimer& other);
    virtual ~SPBTimer();
    SPBTimer& operator=(const SPBTimer& other);
    virtual SPBTimer *dup() const override {return new SPBTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SPBTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SPBTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>spb/SPB.msg:25</tt> by nedtool.
 * <pre>
 * packet remapTimer extends SPBTimer
 * {
 *     type = SPBMsgType::REMAP;
 * }
 * </pre>
 */
class remapTimer : public ::SPBTimer
{
  protected:

  private:
    void copy(const remapTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const remapTimer&);

  public:
    remapTimer(const char *name=nullptr, short kind=0);
    remapTimer(const remapTimer& other);
    virtual ~remapTimer();
    remapTimer& operator=(const remapTimer& other);
    virtual remapTimer *dup() const override {return new remapTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const remapTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, remapTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>spb/SPB.msg:29</tt> by nedtool.
 * <pre>
 * packet parseTimer extends SPBTimer
 * {
 *     type = SPBMsgType::PATH_PARSE;
 * }
 * </pre>
 */
class parseTimer : public ::SPBTimer
{
  protected:

  private:
    void copy(const parseTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const parseTimer&);

  public:
    parseTimer(const char *name=nullptr, short kind=0);
    parseTimer(const parseTimer& other);
    virtual ~parseTimer();
    parseTimer& operator=(const parseTimer& other);
    virtual parseTimer *dup() const override {return new parseTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const parseTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, parseTimer& obj) {obj.parsimUnpack(b);}


#endif // ifndef __SPB_M_H

